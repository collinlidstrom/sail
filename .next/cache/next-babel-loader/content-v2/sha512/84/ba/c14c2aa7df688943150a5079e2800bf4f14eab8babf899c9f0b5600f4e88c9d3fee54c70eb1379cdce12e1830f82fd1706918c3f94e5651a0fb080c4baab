{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport dynamic from \"next/dynamic\";\nimport UseWindowSize from \"../hooks/UseWindowSize\";\nlet MapLeaflet;\n\nconst Map = props => {\n  const [mapLoaded, setMapLoaded] = React.useState(false);\n  const [dragging, setDragging] = React.useState(false);\n  const [tap, setTap] = React.useState(false);\n  const size = UseWindowSize();\n  React.useEffect(() => {\n    MapLeaflet = dynamic(() => import(\"../components/MapLeaflet\"), {\n      ssr: false,\n      loadableGenerated: {\n        webpack: () => [require.resolveWeak(\"../components/MapLeaflet\")],\n        modules: [\"../components/Map.js -> \" + \"../components/MapLeaflet\"]\n      }\n    });\n    setMapLoaded(true);\n  }, []);\n  React.useEffect(() => {\n    if (mapLoaded) {\n      setTap(size.width > 700);\n      setDragging(size.width > 700);\n    }\n  }, [size, mapLoaded]);\n  return mapLoaded ? __jsx(MapLeaflet, _extends({\n    dragging: dragging,\n    tap: tap\n  }, props)) : __jsx(\"p\", null, \"loading\");\n};\n\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}