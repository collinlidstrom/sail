{"ast":null,"code":"import _defineProperty from \"/Users/collinlidstrom/IdeaProjects/sail/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/collinlidstrom/IdeaProjects/sail/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Row, Col, Form, Label, Input, Button, Badge } from \"reactstrap\";\nimport UseWindowSize from \"../hooks/UseWindowSize\";\nimport ActiveLink from \"./ActiveLink\";\nimport menu from \"../data/menu.json\";\nimport userMenu from \"../data/user-menu.json\";\nimport Image from \"./CustomImage\";\nimport Icon from \"./Icon\";\n\nvar Header = function Header(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      collapsed = _React$useState2[0],\n      setCollapsed = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      dropdownOpen = _React$useState4[0],\n      setDropdownOpen = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      searchFocus = _React$useState6[0],\n      setSearchFocus = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dropdownAnimate = _React$useState8[0],\n      setDropdownAnimate = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      parentName = _React$useState10[0],\n      setParentName = _React$useState10[1];\n\n  var size = UseWindowSize();\n\n  var onFocus = function onFocus() {\n    return setSearchFocus(!searchFocus);\n  };\n\n  var toggleDropdown = function toggleDropdown(name) {\n    setDropdownOpen(_objectSpread(_objectSpread({}, dropdownOpen), {}, _defineProperty({}, name, !dropdownOpen[name])));\n  };\n\n  var onLinkClick = function onLinkClick(parent) {\n    size.width < 991 && setCollapsed(!collapsed);\n    setParentName(parent);\n  }; // highlight not only active dropdown item, but also its parent, i.e. dropdown toggle\n\n\n  var highlightDropdownParent = function highlightDropdownParent() {\n    menu.map(function (item) {\n      item.dropdown && item.dropdown.map(function (dropdownLink) {\n        dropdownLink.link && dropdownLink.link === Router.route && setParentName(item.title);\n        dropdownLink.links && dropdownLink.links.map(function (link) {\n          return link.link === Router.route && setParentName(item.title);\n        });\n      });\n      item.megamenu && item.megamenu.map(function (megamenuColumn) {\n        return megamenuColumn.map(function (megamenuBlock) {\n          return megamenuBlock.links.map(function (dropdownLink) {\n            if (dropdownLink.link === Router.route) {\n              dropdownLink.parent ? setParentName(dropdownLink.parent) : setParentName(item.title);\n            }\n          });\n        });\n      });\n      item.link === Router.route && setParentName(item.title);\n    });\n  };\n\n  React.useEffect(highlightDropdownParent, []);\n  return __jsx(\"header\", {\n    className: \"header \".concat(props.headerClasses ? props.headerClasses : \"\")\n  }, __jsx(Navbar, {\n    color: props.nav.color ? props.nav.color : \"white\",\n    light: props.nav.light && true,\n    dark: props.nav.dark && true,\n    fixed: props.nav.fixed ? props.nav.fixed : \"top\",\n    expand: \"lg\",\n    className: props.nav.classes ? props.nav.classes : \"\"\n  }, __jsx(Container, {\n    fluid: true\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(\"a\", {\n    className: \"py-1 navbar-brand\"\n  }, __jsx(\"img\", {\n    src: \"/content/svg/SAIL.PNG\",\n    width: \"50\",\n    height: \"41\",\n    alt: \"Directory logo\"\n  }))), __jsx(Form, {\n    id: \"search\",\n    className: \"form-inline d-none d-sm-flex\"\n  }, __jsx(\"div\", {\n    className: \"input-label-absolute input-label-absolute-left input-reset input-expand ml-lg-2 ml-xl-3 \".concat(searchFocus ? \"focus\" : \"\")\n  }, __jsx(Label, {\n    for: \"search_search\",\n    className: \"label-absolute\"\n  }, __jsx(\"i\", {\n    className: \"fa fa-search\"\n  }), __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"What are you looking for?\")), __jsx(Input, {\n    id: \"search_search\",\n    placeholder: \"Search\",\n    \"aria-label\": \"Search\",\n    bsSize: \"sm\",\n    className: \"border-0 shadow-0 bg-gray-200\",\n    onFocus: onFocus,\n    onBlur: function onBlur() {\n      return setTimeout(function () {\n        return onFocus();\n      }, 333);\n    }\n  }), __jsx(\"button\", {\n    type: \"reset\",\n    className: \"btn btn-sm btn-reset\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-times\"\n  }))))), __jsx(NavbarToggler, {\n    onClick: function onClick() {\n      return setCollapsed(!collapsed);\n    },\n    className: \"navbar-toggler-right\"\n  }, __jsx(\"i\", {\n    className: \"fa fa-bars\"\n  })), __jsx(Collapse, {\n    isOpen: collapsed,\n    navbar: true\n  }, __jsx(Form, {\n    id: \"searchcollapsed\",\n    className: \"form-inline mt-4 mb-2 d-sm-none\"\n  }, __jsx(\"div\", {\n    className: \"input-label-absolute input-label-absolute-left input-reset w-100 \".concat(searchFocus ? \"focus\" : \"\")\n  }, __jsx(Label, {\n    for: \"searchcollapsed_search\",\n    className: \"label-absolute\"\n  }, __jsx(\"i\", {\n    className: \"fa fa-search\"\n  }), __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"What are you looking for?\")), __jsx(Input, {\n    id: \"searchcollapsed_search\",\n    placeholder: \"Search\",\n    \"aria-label\": \"Search\",\n    bsSize: \"sm\",\n    className: \"border-0 shadow-0 bg-gray-200\",\n    onFocus: onFocus,\n    onBlur: function onBlur() {\n      return setTimeout(function () {\n        return onFocus();\n      }, 333);\n    }\n  }), __jsx(Button, {\n    type: \"reset\",\n    size: \"sm\",\n    color: \"deoco\",\n    className: \"btn-reset\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-times\"\n  })))), __jsx(Nav, {\n    navbar: true,\n    className: \"ml-auto\"\n  }, menu && menu.map(function (item) {\n    return item.dropdown || item.megamenu ? // show entire menu to unlogged user or hide items that have hideToLoggedUser set to true\n    !props.loggedUser || props.loggedUser && !item.hideToLoggedUser ? __jsx(Dropdown, {\n      nav: true,\n      inNavbar: true,\n      key: item.title,\n      className: item.position ? \"position-\".concat(item.position) : \"\",\n      isOpen: dropdownOpen[item.title],\n      toggle: function toggle() {\n        return toggleDropdown(item.title);\n      }\n    }, __jsx(DropdownToggle, {\n      nav: true,\n      caret: true,\n      onClick: function onClick() {\n        return setDropdownAnimate(_objectSpread(_objectSpread({}, dropdownAnimate), {}, _defineProperty({}, item.title, !dropdownOpen[item.title])));\n      },\n      className: parentName === item.title ? \"active\" : \"\"\n    }, item.title), __jsx(DropdownMenu, {\n      className: \"\".concat(dropdownAnimate[item.title] === false ? \"hide\" : \"\", \" \").concat(item.megamenu ? \"megamenu py-lg-0\" : \"\")\n    }, item.dropdown && item.dropdown.map(function (dropdownItem) {\n      return dropdownItem.links ? __jsx(React.Fragment, {\n        key: dropdownItem.title\n      }, __jsx(\"h6\", {\n        className: \"dropdown-header font-weight-normal\"\n      }, dropdownItem.title), dropdownItem.links.map(function (link) {\n        return __jsx(ActiveLink, {\n          key: link.title,\n          activeClassName: \"active\",\n          href: link.link,\n          passHref: true\n        }, __jsx(DropdownItem, {\n          onClick: function onClick() {\n            return onLinkClick(item.title);\n          }\n        }, link.title, link.new && __jsx(Badge, {\n          color: \"info-light\",\n          className: \"ml-1 mt-n1\"\n        }, \"New\")));\n      })) : __jsx(ActiveLink, {\n        key: dropdownItem.title,\n        activeClassName: \"active\",\n        href: dropdownItem.link,\n        passHref: true\n      }, __jsx(DropdownItem, {\n        onClick: function onClick() {\n          return onLinkClick(item.title);\n        }\n      }, dropdownItem.title, dropdownItem.new && __jsx(Badge, {\n        color: \"info-light\",\n        className: \"ml-1 mt-n1\"\n      }, \"New\")));\n    }), item.megamenu && __jsx(Row, null, __jsx(Col, {\n      lg: \"9\"\n    }, __jsx(Row, {\n      className: \"p-3 pr-lg-0 pl-lg-5 pt-lg-5\"\n    }, item.megamenu.map(function (megamenuItem, index) {\n      return __jsx(Col, {\n        key: index,\n        lg: \"3\"\n      }, megamenuItem.map(function (block, index) {\n        return __jsx(React.Fragment, {\n          key: index\n        }, __jsx(\"h6\", {\n          className: \"text-uppercase\"\n        }, block.title), __jsx(\"ul\", {\n          className: \"megamenu-list list-unstyled\"\n        }, block.links.map(function (link) {\n          return __jsx(\"li\", {\n            key: link.title,\n            className: \"megamenu-list-item\"\n          }, __jsx(ActiveLink, {\n            activeClassName: \"active\",\n            href: link.link,\n            as: link.as,\n            passHref: true\n          }, __jsx(DropdownItem, {\n            className: \"megamenu-list-link\",\n            onClick: function onClick() {\n              return link.parent ? onLinkClick(link.parent) : onLinkClick(item.title);\n            }\n          }, link.title, link.new && __jsx(Badge, {\n            color: \"info-light\",\n            className: \"ml-1 mt-n1\"\n          }, \"New\"))));\n        })));\n      }));\n    })), item.services && __jsx(Row, {\n      className: \"megamenu-services d-none d-lg-flex pl-lg-5\"\n    }, item.services.map(function (service) {\n      return __jsx(Col, {\n        key: service.title,\n        xl: \"3\",\n        lg: \"6\",\n        className: \"d-flex\"\n      }, __jsx(\"div\", {\n        className: \"megamenu-services-item\"\n      }, __jsx(Icon, {\n        icon: service.icon,\n        className: \"megamenu-services-icon\"\n      }), __jsx(\"div\", null, __jsx(\"h6\", {\n        className: \"text-uppercase\"\n      }, service.title), __jsx(\"p\", {\n        className: \"mb-0 text-muted text-sm\"\n      }, service.content))));\n    }))), item.image && __jsx(Col, {\n      lg: \"3\",\n      className: \"d-none d-lg-block\"\n    }, __jsx(Image, {\n      src: item.image,\n      alt: \"\",\n      className: \"bg-image\",\n      loading: \"eager\",\n      layout: \"fill\"\n    }))))) : \"\" : props.loggedUser && !item.hideToLoggedUser || !props.loggedUser ? __jsx(NavItem, {\n      key: item.title,\n      className: item.button ? \"mt-3 mt-lg-0 ml-lg-3 d-lg-none d-xl-inline-block\" : \"\"\n    }, item.button ? item.showToLoggedUser !== false && __jsx(ActiveLink, {\n      activeClassName: \"active\",\n      href: item.link\n    }, __jsx(\"a\", {\n      className: \"btn btn-primary\",\n      onClick: function onClick() {\n        return onLinkClick(item.title);\n      }\n    }, item.title)) : __jsx(ActiveLink, {\n      activeClassName: \"active\",\n      href: item.link,\n      passHref: true\n    }, __jsx(NavLink, {\n      onClick: function onClick() {\n        return onLinkClick(item.title);\n      }\n    }, item.title))) : \"\";\n  }), props.loggedUser && userMenu && userMenu.map(function (item) {\n    return __jsx(Dropdown, {\n      nav: true,\n      inNavbar: true,\n      key: item.title,\n      className: item.type === \"avatar\" ? \"ml-lg-3\" : \"\",\n      isOpen: dropdownOpen[item.title],\n      toggle: function toggle() {\n        return toggleDropdown(item.title);\n      }\n    }, __jsx(DropdownToggle, {\n      nav: true,\n      style: item.type === \"avatar\" && {\n        padding: 0\n      },\n      onClick: function onClick() {\n        return setDropdownAnimate(_objectSpread(_objectSpread({}, dropdownAnimate), {}, _defineProperty({}, item.title, !dropdownOpen[item.img])));\n      }\n    }, item.type === \"avatar\" ? __jsx(\"div\", {\n      className: \"mr-2 avatar-border-white avatar avatar-sm overflow-hidden\"\n    }, __jsx(Image, {\n      src: \"/content\".concat(item.img),\n      width: 36,\n      height: 36,\n      layout: \"fixed\",\n      alt: item.title\n    })) : item.title), __jsx(DropdownMenu, {\n      className: dropdownAnimate[item.title] === false ? \"hide\" : \"\",\n      right: true\n    }, item.dropdown && item.dropdown.map(function (dropdownItem) {\n      return __jsx(ActiveLink, {\n        key: dropdownItem.title,\n        activeClassName: \"active\",\n        href: dropdownItem.link,\n        passHref: true\n      }, __jsx(DropdownItem, {\n        onClick: function onClick() {\n          return onLinkClick(item.title);\n        }\n      }, dropdownItem.title));\n    })));\n  }))))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}