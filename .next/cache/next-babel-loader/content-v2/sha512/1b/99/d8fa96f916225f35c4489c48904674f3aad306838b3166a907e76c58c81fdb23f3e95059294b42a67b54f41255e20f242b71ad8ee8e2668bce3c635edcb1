{"ast":null,"code":"import _defineProperty from \"/Users/collinlidstrom/IdeaProjects/sail/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/collinlidstrom/IdeaProjects/sail/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { Row, Col, Form, FormGroup, Label, Input, Button, CustomInput } from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useDropzone } from \"react-dropzone\";\nimport { FormContext } from \"../components/FormContext\";\n\nvar ListingForm = function ListingForm(props) {\n  var data = props.data;\n\n  var _React$useContext = React.useContext(FormContext),\n      _React$useContext2 = _slicedToArray(_React$useContext, 2),\n      formInputs = _React$useContext2[0],\n      setFormInputs = _React$useContext2[1];\n\n  var _useDropzone = useDropzone({\n    accept: \"image/*\",\n    onDrop: function onDrop(acceptedFiles) {\n      setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, \"files\", acceptedFiles.map(function (file) {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        });\n      }))));\n    }\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var _onChange = function onChange(e) {\n    var value = e.target.value;\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, e.target.name, value)));\n  };\n\n  var onCheckboxChange = function onCheckboxChange(e) {\n    var value = e.target.value;\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, e.target.id, !value)));\n  };\n\n  var onSelectChange = function onSelectChange(name, e) {\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, name, e)));\n  };\n\n  var onButtonDecrease = function onButtonDecrease(e, name) {\n    var value = parseInt(e.target.nextElementSibling.value, 10);\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, name, value - 1)));\n  };\n\n  var onButtonIncrease = function onButtonIncrease(e, name) {\n    var value = parseInt(e.target.previousElementSibling.value, 10);\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, _defineProperty({}, name, value + 1)));\n  };\n\n  return __jsx(Form, null, data.formBlocks.map(function (block) {\n    return __jsx(Row, {\n      className: \"form-block\",\n      key: block.title\n    }, __jsx(Col, {\n      lg: \"4\"\n    }, __jsx(\"h4\", null, block.title), __jsx(\"p\", {\n      className: \"text-muted text-sm\"\n    }, block.content)), __jsx(Col, {\n      lg: \"7\",\n      className: \"ml-auto\"\n    }, block.inputs.map(function (input, index) {\n      return __jsx(React.Fragment, {\n        key: index\n      }, input.type === \"text\" && __jsx(FormGroup, null, __jsx(Label, {\n        className: \"form-label\",\n        for: input.name\n      }, input.label), __jsx(Input, {\n        type: input.type,\n        input: input.name,\n        name: input.name,\n        id: input.name,\n        value: formInputs[input.name] || \"\",\n        onChange: function onChange(e) {\n          return _onChange(e);\n        }\n      })), input.type === \"textarea\" && __jsx(FormGroup, {\n        className: \"mb-5\"\n      }, __jsx(Label, {\n        className: \"form-label\",\n        for: input.name\n      }, input.label), __jsx(Input, {\n        type: input.type,\n        rows: \"5\",\n        input: input.name,\n        name: input.name,\n        id: input.name,\n        value: formInputs[input.name] || \"\",\n        onChange: function onChange(e) {\n          return _onChange(e);\n        },\n        \"aria-describedby\": input.helpId\n      }), __jsx(\"small\", {\n        id: input.helpId,\n        className: \"form-text text-muted mt-2\"\n      }, input.help)), input.type === \"select\" && __jsx(FormGroup, null, __jsx(Label, {\n        className: \"form-label\",\n        for: input.name\n      }, input.label), __jsx(Select, {\n        id: input.name,\n        name: input.name,\n        options: input.options,\n        className: \"selectpicker\",\n        classNamePrefix: \"selectpicker\",\n        value: formInputs[input.name] || \"\",\n        onChange: function onChange(e) {\n          return onSelectChange(input.name, e);\n        }\n      }), input.text && __jsx(\"small\", {\n        id: \"propertyTypeHelp\",\n        className: \"form-text text-muted\"\n      }, input.text)), input.type === \"radios\" && __jsx(FormGroup, null, __jsx(Label, {\n        className: \"form-label\"\n      }, input.label), input.radios.map(function (radio) {\n        return __jsx(CustomInput, {\n          key: radio.label,\n          type: \"radio\",\n          id: radio.id,\n          name: radio.name,\n          value: radio.id,\n          onChange: function onChange(e) {\n            return _onChange(e);\n          },\n          checked: formInputs[radio.name] === radio.id,\n          label: radio.label\n        });\n      })), input.type === \"form-group\" && __jsx(Row, null, input.inputs.map(function (input) {\n        return __jsx(Col, {\n          md: input.col,\n          key: input.name\n        }, __jsx(FormGroup, null, __jsx(Label, {\n          for: input.name,\n          className: \"form-label\"\n        }, input.label), __jsx(Input, {\n          name: input.name,\n          id: input.name,\n          value: formInputs[input.name] || \"\",\n          onChange: function onChange(e) {\n            return _onChange(e);\n          }\n        })));\n      })), input.type === \"buttons\" && __jsx(Row, null, input.buttons.map(function (button) {\n        return __jsx(Col, {\n          lg: \"4\",\n          key: button.name\n        }, __jsx(Label, {\n          className: \"form-label\"\n        }, button.label), __jsx(\"div\", {\n          className: \"d-flex align-items-center\"\n        }, __jsx(Button, {\n          color: \"items\",\n          className: \"btn-item-decrease\",\n          onClick: function onClick(e) {\n            return onButtonDecrease(e, button.name);\n          }\n        }, \"-\"), __jsx(Input, {\n          name: button.name,\n          value: formInputs[button.name] || 1,\n          disabled: true,\n          className: \"input-items\"\n        }), __jsx(Button, {\n          color: \"items\",\n          className: \"btn-item-increase\",\n          onClick: function onClick(e) {\n            return onButtonIncrease(e, button.name);\n          }\n        }, \"+\")));\n      })), input.type === \"checkboxes\" && __jsx(FormGroup, null, __jsx(Label, {\n        className: \"form-label\"\n      }, input.label), __jsx(\"ul\", {\n        className: \"list-inline mb-0\"\n      }, input.checkboxes.map(function (checkbox) {\n        return __jsx(\"li\", {\n          key: checkbox.id,\n          className: \"list-inline-item\"\n        }, __jsx(CustomInput, {\n          type: \"checkbox\",\n          id: checkbox.id,\n          name: checkbox.name,\n          value: formInputs[checkbox.id] || \"\",\n          onChange: function onChange(e) {\n            return onCheckboxChange(e);\n          },\n          label: checkbox.label,\n          className: \"text-muted\"\n        }));\n      }))), input.type === \"upload\" && __jsx(FormGroup, null, __jsx(\"div\", getRootProps({\n        className: \"dropzone dz-clickable\"\n      }), __jsx(\"input\", getInputProps()), __jsx(\"div\", {\n        className: \"dz-message text-muted\"\n      }, __jsx(\"p\", null, \"Drop files here or click to upload.\"), __jsx(\"p\", null, __jsx(\"span\", {\n        className: \"note\"\n      }, \"(This is just a demo dropzone. Selected files are\", \" \", __jsx(\"strong\", null, \"not\"), \" actually uploaded.)\")))), __jsx(Row, {\n        className: \"mt-4\"\n      }, formInputs[\"files\"] && formInputs[\"files\"].map(function (file) {\n        return __jsx(\"div\", {\n          key: file.name,\n          className: \"col-lg-4\"\n        }, __jsx(\"div\", null, __jsx(\"img\", {\n          src: file.preview,\n          className: \"img-fluid rounded shadow mb-4\"\n        })));\n      }))));\n    })));\n  }), __jsx(Row, {\n    className: \"form-block flex-column flex-sm-row\"\n  }, __jsx(Col, {\n    className: \"text-center text-sm-left\"\n  }, props.prevStep && __jsx(Link, {\n    href: props.prevStep,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"link\",\n    className: \"text-muted\"\n  }, __jsx(\"i\", {\n    className: \"fa-chevron-left fa mr-2\"\n  }), \"Back\"))), __jsx(Col, {\n    className: \"text-center text-sm-right\"\n  }, props.nextStep && __jsx(Link, {\n    href: props.nextStep,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"primary\",\n    className: \"px-3\"\n  }, \"Next step\", __jsx(\"i\", {\n    className: \"fa-chevron-right fa ml-2\"\n  }))), props.finish && __jsx(Link, {\n    href: props.finish,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"primary\",\n    className: \"px-3\"\n  }, \"Finish\", __jsx(\"i\", {\n    className: \"fa-chevron-right fa ml-2\"\n  }))))));\n};\n\nexport default ListingForm;","map":null,"metadata":{},"sourceType":"module"}