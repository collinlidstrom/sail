{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { Row, Col, Form, FormGroup, Label, Input, Button, CustomInput } from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useDropzone } from \"react-dropzone\";\nimport { FormContext } from \"../components/FormContext\";\n\nconst ListingForm = props => {\n  const data = props.data;\n  const [formInputs, setFormInputs] = React.useContext(FormContext);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n        [\"files\"]: acceptedFiles.map(file => Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        }))\n      }));\n    }\n  });\n\n  const onChange = e => {\n    const value = e.target.value;\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [e.target.name]: value\n    }));\n  };\n\n  const onCheckboxChange = e => {\n    const value = e.target.value;\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [e.target.id]: !value\n    }));\n  };\n\n  const onSelectChange = (name, e) => {\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [name]: e\n    }));\n  };\n\n  const onButtonDecrease = (e, name) => {\n    const value = parseInt(e.target.nextElementSibling.value, 10);\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [name]: value - 1\n    }));\n  };\n\n  const onButtonIncrease = (e, name) => {\n    const value = parseInt(e.target.previousElementSibling.value, 10);\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [name]: value + 1\n    }));\n  };\n\n  return __jsx(Form, null, data.formBlocks.map(block => __jsx(Row, {\n    className: \"form-block\",\n    key: block.title\n  }, __jsx(Col, {\n    lg: \"4\"\n  }, __jsx(\"h4\", null, block.title), __jsx(\"p\", {\n    className: \"text-muted text-sm\"\n  }, block.content)), __jsx(Col, {\n    lg: \"7\",\n    className: \"ml-auto\"\n  }, block.inputs.map((input, index) => __jsx(React.Fragment, {\n    key: index\n  }, input.type === \"text\" && __jsx(FormGroup, null, __jsx(Label, {\n    className: \"form-label\",\n    for: input.name\n  }, input.label), __jsx(Input, {\n    type: input.type,\n    input: input.name,\n    name: input.name,\n    id: input.name,\n    value: formInputs[input.name] || \"\",\n    onChange: e => onChange(e)\n  })), input.type === \"textarea\" && __jsx(FormGroup, {\n    className: \"mb-5\"\n  }, __jsx(Label, {\n    className: \"form-label\",\n    for: input.name\n  }, input.label), __jsx(Input, {\n    type: input.type,\n    rows: \"5\",\n    input: input.name,\n    name: input.name,\n    id: input.name,\n    value: formInputs[input.name] || \"\",\n    onChange: e => onChange(e),\n    \"aria-describedby\": input.helpId\n  }), __jsx(\"small\", {\n    id: input.helpId,\n    className: \"form-text text-muted mt-2\"\n  }, input.help)), input.type === \"select\" && __jsx(FormGroup, null, __jsx(Label, {\n    className: \"form-label\",\n    for: input.name\n  }, input.label), __jsx(Select, {\n    id: input.name,\n    name: input.name,\n    options: input.options,\n    className: \"selectpicker\",\n    classNamePrefix: \"selectpicker\",\n    value: formInputs[input.name] || \"\",\n    onChange: e => onSelectChange(input.name, e)\n  }), input.text && __jsx(\"small\", {\n    id: \"propertyTypeHelp\",\n    className: \"form-text text-muted\"\n  }, input.text)), input.type === \"radios\" && __jsx(FormGroup, null, __jsx(Label, {\n    className: \"form-label\"\n  }, input.label), input.radios.map(radio => __jsx(CustomInput, {\n    key: radio.label,\n    type: \"radio\",\n    id: radio.id,\n    name: radio.name,\n    value: radio.id,\n    onChange: e => onChange(e),\n    checked: formInputs[radio.name] === radio.id,\n    label: radio.label\n  }))), input.type === \"form-group\" && __jsx(Row, null, input.inputs.map(input => __jsx(Col, {\n    md: input.col,\n    key: input.name\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: input.name,\n    className: \"form-label\"\n  }, input.label), __jsx(Input, {\n    name: input.name,\n    id: input.name,\n    value: formInputs[input.name] || \"\",\n    onChange: e => onChange(e)\n  }))))), input.type === \"buttons\" && __jsx(Row, null, input.buttons.map(button => __jsx(Col, {\n    lg: \"4\",\n    key: button.name\n  }, __jsx(Label, {\n    className: \"form-label\"\n  }, button.label), __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    color: \"items\",\n    className: \"btn-item-decrease\",\n    onClick: e => onButtonDecrease(e, button.name)\n  }, \"-\"), __jsx(Input, {\n    name: button.name,\n    value: formInputs[button.name] || 1,\n    disabled: true,\n    className: \"input-items\"\n  }), __jsx(Button, {\n    color: \"items\",\n    className: \"btn-item-increase\",\n    onClick: e => onButtonIncrease(e, button.name)\n  }, \"+\"))))), input.type === \"checkboxes\" && __jsx(FormGroup, null, __jsx(Label, {\n    className: \"form-label\"\n  }, input.label), __jsx(\"ul\", {\n    className: \"list-inline mb-0\"\n  }, input.checkboxes.map(checkbox => __jsx(\"li\", {\n    key: checkbox.id,\n    className: \"list-inline-item\"\n  }, __jsx(CustomInput, {\n    type: \"checkbox\",\n    id: checkbox.id,\n    name: checkbox.name,\n    value: formInputs[checkbox.id] || \"\",\n    onChange: e => onCheckboxChange(e),\n    label: checkbox.label,\n    className: \"text-muted\"\n  }))))), input.type === \"upload\" && __jsx(FormGroup, null, __jsx(\"div\", getRootProps({\n    className: \"dropzone dz-clickable\"\n  }), __jsx(\"input\", getInputProps()), __jsx(\"div\", {\n    className: \"dz-message text-muted\"\n  }, __jsx(\"p\", null, \"Drop files here or click to upload.\"), __jsx(\"p\", null, __jsx(\"span\", {\n    className: \"note\"\n  }, \"(This is just a demo dropzone. Selected files are\", \" \", __jsx(\"strong\", null, \"not\"), \" actually uploaded.)\")))), __jsx(Row, {\n    className: \"mt-4\"\n  }, formInputs[\"files\"] && formInputs[\"files\"].map(file => __jsx(\"div\", {\n    key: file.name,\n    className: \"col-lg-4\"\n  }, __jsx(\"div\", null, __jsx(\"img\", {\n    src: file.preview,\n    className: \"img-fluid rounded shadow mb-4\"\n  }))))))))))), __jsx(Row, {\n    className: \"form-block flex-column flex-sm-row\"\n  }, __jsx(Col, {\n    className: \"text-center text-sm-left\"\n  }, props.prevStep && __jsx(Link, {\n    href: props.prevStep,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"link\",\n    className: \"text-muted\"\n  }, __jsx(\"i\", {\n    className: \"fa-chevron-left fa mr-2\"\n  }), \"Back\"))), __jsx(Col, {\n    className: \"text-center text-sm-right\"\n  }, props.nextStep && __jsx(Link, {\n    href: props.nextStep,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"primary\",\n    className: \"px-3\"\n  }, \"Next step\", __jsx(\"i\", {\n    className: \"fa-chevron-right fa ml-2\"\n  }))), props.finish && __jsx(Link, {\n    href: props.finish,\n    passHref: true\n  }, __jsx(Button, {\n    color: \"primary\",\n    className: \"px-3\"\n  }, \"Finish\", __jsx(\"i\", {\n    className: \"fa-chevron-right fa ml-2\"\n  }))))));\n};\n\nexport default ListingForm;","map":null,"metadata":{},"sourceType":"module"}